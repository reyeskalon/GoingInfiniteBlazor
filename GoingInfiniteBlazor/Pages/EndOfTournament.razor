@page "/end-of-tournament"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http

@if (TournamentLoaded())
{
   <div class="matches">
   @for (int i = 0; i < tourney.Matches.Count; i++)
   {
       <div class="match">
           <h1>Match @(i + 1)</h1>
           <h3>@tourney.Matches[i].Outcome</h3>
           <p>Vs</p>
           <h3>@tourney.Matches[i].OpponentName</h3>
       </div>
   }
   </div>
   <BlueButton OnClickCallback=GoToDeckBuilder Text="Build Deck"></BlueButton>
   <BlueButton OnClickCallback=SaveTournament Text="Save Tournament"></BlueButton>
    @if (saveSuccessful)
    {
        <p>Tournament Saved</p>
    }
}


@code {
    private DraftTournament tourney = null;
    private bool saveSuccessful = false;

    protected override async Task OnInitializedAsync()
    {
        tourney = await LocalStorage.GetItemAsync<DraftTournament>(Constants.TOURNAMENT);
    }

    private bool TournamentLoaded()
    {
        return (tourney != null);
    }

    private void GoToDeckBuilder()
    {
        NavigationManager.NavigateTo("/deck-builder");
    }

    private async void SaveTournament()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync<DraftTournament>(Constants.API_BASE_URL + "Tournament", tourney);
        if (response.IsSuccessStatusCode)
        {
            saveSuccessful = true;
            StateHasChanged();
        }
    }
}
